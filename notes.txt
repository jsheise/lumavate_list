One problem I'm having is using table cells as fields for form entry.
Temporarily will go with standard form entry method.
	ng-form directive?
Update: resolved by moving new entry inputs to outside table. However,
a form may still be used for the sake of organization.

After being overwhelmed with information regarding how to design back-end
with Python, going to focus on AngularJS and Angular Material.
Update: AngularJS front-end done, though will need updating for Flask and
potentially PostgreSQL back-end.

Initially wanted to do a rating system with stars, but opted for a favorite
checkmark instead.
Consider using numbers for rating?
Also, what if user wants to favorite an entire album?
	i.e. "sort by best albums"

Try to understand $valid and $invalid for forms more.

***
Log 19/05/29

	With basic Flask/AngularJS interaction done, time to implement PostgreSQL
	database!

	Taking tips from tutorial at http://blog.sahildiwan.com/posts/flask-and-postgresql-app-deployed-on-heroku/
	Intend on diving into more specific documentation as information is required.

	Note that there is currently an issue with duplicate entries being made on an
	edit.
	This is likely front-end, though could cause complications with database?
	Is it just displaying the same thing?
		i.e. HTML code duplicates it, not actually in Python array?
			Maybe, but the ng-repeat makes me think otherwise.
		Any way to inspect array while running server?

***
Log 19/05/29
	Note that environment variables defined in venv are only in venv
	i.e. when printenv used outside of venv, not there

	Do we have to migrate the database so that it's in venv?

	Note that I did have to pip install postgresql for psycopg2-binrary

	I did forget to install flask_migrate, so had to do that!

	When running python manage.py db init, got
	Traceback (most recent call last):
  File "manage.py", line 4, in <module>
    from app import app, db
  File "/home/jsheise/Desktop/sql_test/app.py", line 8, in <module>
    app.config.from_object(os.environ['APP_SETTINGS'])

	Solution was to import os in app.py to provide os object
	Ran command again, got
	Creating directory /home/jsheise/Desktop/sql_test/migrations ... done
	Creating directory /home/jsheise/Desktop/sql_test/migrations/versions ... done
	Generating /home/jsheise/Desktop/sql_test/migrations/env.pyc ... done
	Generating /home/jsheise/Desktop/sql_test/migrations/README ... done
	Generating /home/jsheise/Desktop/sql_test/migrations/env.py ... done
	Generating /home/jsheise/Desktop/sql_test/migrations/script.py.mako ... done
	Generating /home/jsheise/Desktop/sql_test/migrations/alembic.ini ... done
	Please edit configuration/connection/logging settings in '/home/jsheise/Desktop/sql_test/migrations/alembic.ini' before proceeding.

	On migrate command, got
	sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) fe_sendauth: no password supplied

	Having some general database issues
	Going to remove user jsheise from postgre

	Ran into an issue, in that list_db depends on jsheise user and thus jsheise cannot be removed

	'\l' lists databases and owners (at least from postgre user/role)
	From this, I see that jsheise user owns both jsheise and list_db databases

	drop database jsheise;
	drop database list_db;
	drop user jsheise;

	Now let's start over...

	sudo -u postgres createuser --superuser jsheise
	Had to enter jsheise Linux sudo pass...
	sudo -u jsheise createdb psql_test_db
	Creating a database with the jsheise psql user/role

	Holy moly, after hours of figuring out the issue with the password when trying to migrate,
	the fix was to use export DATABASE_URL="postgresql:///psql_test_db"

	Apparently... "the answer is to not bother setting the host and port and it works"\
	"Just avoid the host and it doesn't do the password checking."

	Note: cut -d: -f1 /etc/passwd yields local Linux users, including jsheise and Postgres

	With migrating database in Heroku, get the following on an add
	(psycopg2.errors.UndefinedTable) relation "books" does not exist LINE 1: INSERT INTO books (name, author, published) VALUES ('this is... ^ [SQL: INSERT INTO books (name, author, published) VALUES (%(name)s, %(author)s, %(published)s) RETURNING books.id] [parameters: {'name': 'this is a test book', 'author': 'me johansen', 'published': '1996-06-28'}] (Background on this error at: http://sqlalche.me/e/f405)

	After running heroku run python manage.py db upgrade --app testappforpsql, get:
	Book added. book id=1

Log 19/06/02
	So the data I entered on the test program for postgres actually worked.
	The thing I was not thinking about was that I needed to inspect the database from the Heroku client.

	i.e. pg:psql --app prod
	then SELECT * from data_table_name;

	DON'T FORGET THE SEMI-COLONS!

	Now let's adapt this test version to the Lumavate list.

	Also note that I can create a dataclip at data.heroku.com
	and have it as the above psql command to view the data in the table.

	going to kind of follow the advice of another tutorial at https://dev.to/paultopia/the-easiest-possible-way-to-throw-a-webapp-online-flask--heroku--postgres-185o

	According to another resource, rather than creating database locally and migrating, should be able to use create_all() python method in Heroku CLI
	Had to install flask_triangle to venv

	Could not create database with Python CLI, so used createdb -u jsheise music_db

	Successfully put basic dev server up with database, but on entry, got:
	ProgrammingError: (psycopg2.errors.UndefinedTable) relation "music_data" does not exist
LINE 1: INSERT INTO music_data (song, artist, album, year, rating_0_...

	This is because of the __tablename__ = 'music_data' line that was in the EntryData class.

	However, I then got the following:
	ProgrammingError: (psycopg2.errors.UndefinedTable) relation "music_entry" does not exist
	LINE 1: INSERT INTO music_entry (song, artist, album, year, rating_0...
	                    ^

	[SQL: INSERT INTO music_entry (song, artist, album, year, rating_0_5) VALUES (%(song)s, %(artist)s, %(album)s, %(year)s, %(rating_0_5)s) RETURNING music_entry.id]
	[parameters: {'rating_0_5': None, 'album': u'Periphery III', 'year': u'2016', 'artist': u'Periphery', 'song': u'Catch Fire'}]
	(Background on this error at: http://sqlalche.me/e/f405)

	First of all, note the parameters: {'rating_0_5'... It doesn't look like rating saved, which could be due to the __init__ "rating" field in the initializer not matching the database field "rating_0_5"

	NOTE THAT I NEED TO BE OUTSIDE OF VIRTUAL ENVIRONMENT TO COMMIT.
	or is it just because internet went down again?
	Looks like the internet went down... Both computers as well.

	Well, focusing on local dev... Turns out there's an outage, so nothing I can do with Heroku.

	Changed class name to MusicDb to see if the problem is in the class vs database Name
	Doesn't seem so.

	ProgrammingError: (psycopg2.errors.UndefinedTable) relation "music_db" does not exist
	LINE 1: INSERT INTO music_db (song, artist, album, year, rating_0_5)...

	OH. Is the issue that I'm trying to insert directly into the database, rather than a table?
	Yeah, that's probably it. Gonna try to return to Python method of database creation.

	Ended up going with migration method of database and table creation, since I couldn't get other methods to work.

	It works beautifully now! The only issue is that rating is not saving properly.

	NOTE: To see new database entries, have to re-run the python app.
	This is because the query for the data is run once, and so we don't get it until the next run.
	Possible solution to send the user to a "Thank You!" page?
		Nope.

	Ratings still not saving properly. Nothing goes into that field, even after naming rating fields the same.

	So at this point, not sure how to use list1.js file to submit to database.
	i.e. cannot communicate between SQLAlchemy object and $scope logic.

	When finally deploying to Heroku, a big problem was that I had not initalized the git repo in the actual project directory.

	IMPORTANT: When facing issues with tables not found, use the create_all on a script run! INCLUDING ON HEROKU SIDE
